package edu.brown.cs.athenia.driveapi;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.security.GeneralSecurityException;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.auth.oauth2.TokenResponse;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.FileContent;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.client.util.store.FileDataStoreFactory;
import com.google.api.services.drive.Drive;
import com.google.api.services.drive.DriveScopes;
import com.google.api.services.drive.model.File;
import com.google.api.services.drive.model.FileList;

/**
 * A class for interacting with the Google Drive API. Has external interactions allowing:
 *  - Checking if a given user is logged in;
 *  - Setting up and getting the url of an authentication page for a user to log in on;
 *  - Creating and storing a new credential for a user after authentication;
 *  - Retrieving and updating of a user's database file on their Drive.
 * @author Thomas Del Vecchio
 */
public class GoogleDriveApi {

  // External interactions with other parts of project.

  /**
   * Checks if a given user is logged in.
   * @param userId The id of the user
   * @return whether the given user is logged in.
   * @throws DriveApiException when anything goes wrong with API connection.
   */
  public static boolean isLoggedIn(String userId) throws DriveApiException {
    try {
      return getCredential(userId) != null;
    } catch (IOException | GeneralSecurityException e) {
      throw new DriveApiException(e);
    }
  }

  /**
   * Generates a url for the user to be redirected to for authentication.
   * @param state The stored state on the user's session (for security).
   * @return the url where the user should be redirected.
   * @throws DriveApiException when anything goes wrong with API connection.
   */
  public static String getUrl(String state, String redirectUri) throws DriveApiException {
    try {
      return getFlow().newAuthorizationUrl()
              .setRedirectUri(redirectUri)
              .setState(state)            // Prevent request forgery
              .build();
    } catch (IOException | GeneralSecurityException e) {
      throw new DriveApiException(e);
    }
  }

  /**
   * Creates and stores a new credential for the given user after authentication.
   * @param userId The user who logged in.
   * @param code The code generated by the authentication process.
   * @throws DriveApiException when anything goes wrong with API connection.
   */
  public static void createCredential(String userId, String code, String redirectUri) throws DriveApiException {
    try {
      // Create flow for Google
      GoogleAuthorizationCodeFlow flow = GoogleDriveApi.getFlow();

      // Get token from authentication code
      final TokenResponse tokenResponse =
              flow.newTokenRequest(code)
                      .setRedirectUri(redirectUri)
                      .execute();

      flow.createAndStoreCredential(tokenResponse, userId);
    } catch (IOException | GeneralSecurityException e) {
      throw new DriveApiException(e);
    }
  }


  // Loading and updating of database file

  private static final Map<String, java.io.File> FILE_MAP = new HashMap<>();

  /**
   * Downloads the user's database file and returns a java File pointing to it in memory.
   * @param userId The user whose database we are grabbing.
   * @return the file that points to the database in server memory.
   * @throws DriveApiException when anything goes wrong with API connection.
   */
  public static java.io.File getDataBase(String userId)
          throws DriveApiException {
    if (FILE_MAP.containsKey(userId)) {
      return FILE_MAP.get(userId);
    }

    try {
      java.io.File file = new java.io.File(
              "src/main/resources/userData/" + userId + ".sqlite3");

      Drive service = getService(userId);

      File driveFile = getDriveFile(service);
//      service.files().delete(driveFile.getId()).execute();
//      driveFile = null;
      if (driveFile != null) {
        System.out.println("what teh heck");
        if (file.exists()) {
          file.delete();
        }
        file.createNewFile();
        OutputStream outputStream = new FileOutputStream(file);
        service.files().get(driveFile.getId())
                .executeMediaAndDownloadTo(outputStream);
      }

      FILE_MAP.put(userId, file);

      return file;
    } catch (IOException | GeneralSecurityException e) {
      e.printStackTrace();
      throw new DriveApiException(e);
    }
  }

  /**
   * Updates the user's database file on Drive.
   * @param userId The user whose file we are updating.
   * @param dataBase The java File pointing to the database file in server memory.
   * @throws DriveApiException when anything goes wrong with API connection.
   */
  public static void setDataBase(String userId, java.io.File dataBase)
          throws DriveApiException {
    FILE_MAP.put(userId, dataBase);

    try {
      Drive service = getService(userId);

      File driveFile = getDriveFile(service);
      if (driveFile != null) {
        service.files().delete(driveFile.getId()).execute();
      }

      File fileMetadata = setupDriveFile(service);
      FileContent fileContent = new FileContent("application/x-sqlite3",
              dataBase);

      service.files().create(fileMetadata, fileContent).execute();
    } catch (IOException | GeneralSecurityException e) {
      throw new DriveApiException(e);
    }

  }


  // Internal helper methods for connecting with Google API.

  private static final JsonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance();
  private static final String CREDENTIALS_FILE_PATH = "/credentials.json";
  private static final String TOKENS_DIRECTORY_PATH = "tokens";
  private static final List<String> SCOPES = Collections
          .singletonList(DriveScopes.DRIVE_APPDATA);
  private static final String APPLICATION_NAME = "Athenia";

  /**
   * Generates a flow for use with Google API.
   * @return The authorization flow.
   * @throws IOException when credentials.json can't be loaded.
   * @throws GeneralSecurityException for other reasons.
   */
  private static GoogleAuthorizationCodeFlow getFlow() throws IOException, GeneralSecurityException {
    // Generate transport
    NetHttpTransport HTTP_TRANSPORT = GoogleNetHttpTransport.newTrustedTransport();

    // Generate credentials
    InputStream in = GoogleDriveApi.class
            .getResourceAsStream(CREDENTIALS_FILE_PATH);
    GoogleClientSecrets clientSecrets = GoogleClientSecrets.load(JSON_FACTORY,
            new InputStreamReader(in));

    // Create flow for Google
    GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(
            HTTP_TRANSPORT,
            JSON_FACTORY,
            clientSecrets,
            SCOPES)
            .setDataStoreFactory(new FileDataStoreFactory(new java.io.File(TOKENS_DIRECTORY_PATH)))
            .setAccessType("offline")
            .build();

    return flow;
  }

  /**
   * Loads the credentials of the given userId. Returns null if no token.
   * @param userId the user to load credentials for.
   * @return the credentials, or null if no token.
   * @throws IOException when unable to read client secrets from file.
   * @throws GeneralSecurityException when something goes wrong with creating a new Trusted Transport.
   */
  private static Credential getCredential(String userId) throws IOException, GeneralSecurityException {
    return getFlow().loadCredential(userId);
  }

  /**
   * Setup a new Drive service.
   * @param userId The user's id.
   * @return the service for the user.
   * @throws IOException when unable to read client secrets from file.
   * @throws GeneralSecurityException when something goes wrong with creating a new Trusted Transport.
   */
  private static Drive getService(String userId) throws IOException,
      GeneralSecurityException {
    // Build a new authorized API client service.
    final NetHttpTransport HTTP_TRANSPORT = GoogleNetHttpTransport
        .newTrustedTransport();
    Drive service = new Drive.Builder(HTTP_TRANSPORT, JSON_FACTORY,
        getCredential(userId)).setApplicationName(APPLICATION_NAME).build();
    return service;
  }

  /**
   * Creates a new file on Drive for the user's database.
   * @param service the Drive service through which the new Drive file is created.
   * @throws IOException when something goes wrong creating the database file.
   * @returns the id of the file created.
   */
  private static File setupDriveFile(Drive service) throws IOException {
    System.out.println("Setup");
    File fileMetadata = new File();
    fileMetadata.setName("userData.sqlite3");
    fileMetadata.setMimeType("application/x-sqlite3");
    fileMetadata.setParents(Collections.singletonList("appDataFolder"));

    return fileMetadata;
  }

  private static File getDriveFile(Drive service) throws IOException {
    System.out.println("Get");
    FileList files = service.files().list()
            .setSpaces("appDataFolder")
            .setFields("nextPageToken, files(id, name)")
            .setPageSize(10)
            .execute();
    for (File file : files.getFiles()) {
      if (file.getName().equals("userData.sqlite3")) {
        return file;
      }
    }

    return null;
  }
}
